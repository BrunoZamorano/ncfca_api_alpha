// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// local env
// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// neon env
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  DONO_DE_CLUBE
  SEM_FUNCAO
  ADMIN
}

enum FamilyStatus {
  NOT_AFFILIATED
  PENDING_PAYMENT
  AFFILIATED
  EXPIRED
}

enum DependantRelationship {
  DAUGHTER
  HUSBAND
  CHILD
  WIFE
  SON
  OTHER
}

enum DependantType {
  STUDENT
  ALUMNI
  PARENT
}

enum Sex {
  FEMALE
  MALE
}

enum MembershipStatus {
  ACTIVE
  REVOKED
}

enum EnrollmentStatus {
  REJECTED
  APPROVED
  PENDING
}

enum PaymentStatus {
  CANCELLED
  REFUNDED
  EXPIRED
  PENDING
  FAILED
  PAID
}

enum PaymentMethod {
  CREDIT_CARD
  PIX
}

enum TransactionContextType {
  FAMILY_AFFILIATION
  FAMILY_RENEWAL
}

enum ClubRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TournamentType {
  INDIVIDUAL
  DUO
}

enum RegistrationStatus {
  CONFIRMED
  CANCELLED
  PENDING_APPROVAL
  REJECTED
}

enum SyncStatus {
  PENDING
  SYNCED
  FAILED
}

model User {
  id           String  @id @default(uuid())
  email        String  @unique
  first_name   String
  last_name    String
  rg           String
  cpf          String  @unique
  phone        String
  roles        String
  password     String
  street       String
  number       String
  neighborhood String
  city         String
  state        String
  complement   String?
  zip_code     String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  club        Club?         @relation("club_principal")
  family      Family?       @relation("holder")
  Transaction Transaction[]
  ClubRequest ClubRequest[]
}

model Family {
  id                     String       @id @default(uuid())
  status                 FamilyStatus
  holder_id              String       @unique
  created_at             DateTime     @default(now())
  updated_at             DateTime     @updatedAt
  affiliated_at          DateTime?
  affiliation_expires_at DateTime?

  holder             User                @relation("holder", fields: [holder_id], references: [id])
  dependants         Dependant[]
  memberships        ClubMembership[]
  transactions       Transaction[]
  enrollmentRequests EnrollmentRequest[]
}

model Dependant {
  id           String                @id @default(uuid())
  last_name    String
  first_name   String
  family_id    String
  relationship DependantRelationship
  type         DependantType
  sex          Sex
  email        String?
  phone        String?
  birthdate    DateTime
  created_at   DateTime              @default(now())
  updated_at   DateTime              @updatedAt

  family                  Family              @relation(fields: [family_id], references: [id])
  memberships             ClubMembership[]
  enrollmentRequests      EnrollmentRequest[]
  competitorRegistrations Registration[]      @relation("RegistrationCompetitor")
  partnerRegistrations    Registration[]      @relation("RegistrationPartner")
}

model Club {
  id           String   @id @default(uuid())
  name         String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  max_members  Int?
  principal_id String   @unique
  city         String
  state        String
  number       String
  street       String
  zip_code     String
  complement   String?
  neighborhood String

  principal          User                @relation("club_principal", fields: [principal_id], references: [id])
  memberships        ClubMembership[]
  enrollmentRequests EnrollmentRequest[]
}

model ClubMembership {
  id        String           @id @default(uuid())
  club_id   String
  member_id String
  family_id String
  status    MembershipStatus

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  club      Club      @relation(fields: [club_id], references: [id])
  family    Family    @relation(fields: [family_id], references: [id])
  dependant Dependant @relation(fields: [member_id], references: [id])
}

model EnrollmentRequest {
  id               String           @id @default(uuid())
  club_id          String
  member_id        String
  family_id        String
  status           EnrollmentStatus
  resolved_at      DateTime?
  requested_at     DateTime         @default(now())
  rejection_reason String?

  club      Club      @relation(fields: [club_id], references: [id])
  family    Family    @relation(fields: [family_id], references: [id])
  dependant Dependant @relation(fields: [member_id], references: [id])
}

model Transaction {
  id                     String                 @id @default(uuid())
  status                 PaymentStatus
  user_id                String
  gateway                String
  family_id              String
  created_at             DateTime               @default(now())
  amount_cents           Int
  context_type           TransactionContextType
  payment_method         PaymentMethod
  gateway_payload        Json?
  gateway_transaction_id String                 @unique

  user   User   @relation(fields: [user_id], references: [id])
  family Family @relation(fields: [family_id], references: [id])
}

model Training {
  id          String   @id @default(uuid())
  title       String
  description String
  youtube_url String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model ClubRequest {
  id               String            @id @default(uuid())
  status           ClubRequestStatus @default(PENDING)
  club_name        String
  max_members      Int?
  resolved_at      DateTime?
  requested_at     DateTime          @default(now())
  requester_id     String
  rejection_reason String?
  city             String
  state            String
  number           String
  street           String
  zip_code         String
  complement       String?
  neighborhood     String

  requester User @relation(fields: [requester_id], references: [id])
}

model Tournament {
  id                      String         @id @default(uuid())
  name                    String
  description             String
  type                    TournamentType
  registration_start_date DateTime
  registration_end_date   DateTime
  start_date              DateTime
  version                 Int            @default(1)
  deleted_at              DateTime?
  created_at              DateTime       @default(now())
  updated_at              DateTime       @updatedAt

  registrations Registration[]

  @@map("tournament")
}

model Registration {
  id            String             @id @default(uuid())
  tournament    Tournament         @relation(fields: [tournament_id], references: [id])
  tournament_id String
  competitor    Dependant          @relation("RegistrationCompetitor", fields: [competitor_id], references: [id])
  competitor_id String
  partner       Dependant?         @relation("RegistrationPartner", fields: [partner_id], references: [id])
  partner_id    String?
  status        RegistrationStatus
  type          TournamentType
  version       Int                @default(1)
  sync          RegistrationSync?
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt

  @@unique([tournament_id, competitor_id, partner_id])
  @@map("registrations")
}

model RegistrationSync {
  id              String       @id @default(uuid())
  registration    Registration @relation(fields: [registration_id], references: [id])
  registration_id String       @unique
  status          SyncStatus   @default(PENDING)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  attempts        Int          @default(0)
  last_attempt_at DateTime?
  next_attempt_at DateTime?

  @@map("registration_syncs")
}
